# ============================================
# TELEGRAM BOT ENVIRONMENT VARIABLES
# ============================================
# Copy this file to .env and fill in your values
# NEVER commit .env file with actual tokens!

# -----------------------------
# REQUIRED: TELEGRAM CONFIGURATION
# -----------------------------

# Bot token from @BotFather
# Format: 123456789:ABCdefGHIjklmNOPqrstUVwxyz
TELEGRAM_BOT_TOKEN=YOUR_BOT_TOKEN_FROM_BOTFATHER

# Bot username (without @)
# Example: ton_hackathon_bot
TELEGRAM_BOT_USERNAME=your_bot_username

# -----------------------------
# WEB APP CONFIGURATION
# -----------------------------

# URL where your dApp is hosted
# For local development: http://localhost:5174
# For production: https://your-domain.com
WEBAPP_URL=http://localhost:5174

# Web app domain for validation
WEBAPP_DOMAIN=localhost

# -----------------------------
# TON BLOCKCHAIN CONFIGURATION
# -----------------------------

# Network to connect to
# Options: mainnet, testnet
TON_NETWORK=testnet

# TON Center API key (optional but recommended for mainnet)
# Get one at: https://toncenter.com/
TON_API_KEY=

# -----------------------------
# TON CONNECT CONFIGURATION
# -----------------------------

# URL to your TON Connect manifest file
# Must be publicly accessible
# Example: https://your-domain.com/tonconnect-manifest.json
TONCONNECT_MANIFEST_URL=https://your-domain.com/tonconnect-manifest.json

# -----------------------------
# DATABASE CONFIGURATION (Optional)
# -----------------------------

# PostgreSQL connection string
# Format: postgresql://user:password@localhost:5432/database_name
DATABASE_URL=

# Redis connection string (for caching and sessions)
# Format: redis://localhost:6379
REDIS_URL=

# -----------------------------
# ADMIN & SECURITY
# -----------------------------

# Comma-separated list of admin Telegram user IDs
# These users will have access to admin commands
# Example: 123456789,987654321
ADMIN_CHAT_IDS=

# Secret key for session encryption
# Generate a random string for production
SESSION_SECRET=your-secret-key-here

# Enable request validation
# Validates that requests come from Telegram
VALIDATE_TELEGRAM_REQUESTS=true

# -----------------------------
# MONITORING & LOGGING
# -----------------------------

# Log level
# Options: error, warn, info, debug
LOG_LEVEL=info

# Sentry DSN for error tracking (optional)
# Get one at: https://sentry.io/
SENTRY_DSN=

# Enable performance monitoring
ENABLE_PERFORMANCE_MONITORING=false

# -----------------------------
# RATE LIMITING
# -----------------------------

# Maximum requests per user per minute
RATE_LIMIT_PER_MINUTE=60

# Maximum requests per user per hour
RATE_LIMIT_PER_HOUR=1000

# Enable rate limiting
ENABLE_RATE_LIMITING=true

# -----------------------------
# NOTIFICATIONS
# -----------------------------

# Channel ID for bot notifications
# Bot must be admin in this channel
NOTIFICATION_CHANNEL_ID=

# Send error notifications to admins
SEND_ERROR_NOTIFICATIONS=true

# Send daily statistics
SEND_DAILY_STATS=false

# -----------------------------
# DEVELOPMENT & DEBUG
# -----------------------------

# Enable debug mode
# Shows additional logging and development tools
DEBUG_MODE=false

# Skip wallet verification in development
SKIP_WALLET_VERIFICATION=false

# Mock blockchain responses (for testing)
MOCK_BLOCKCHAIN=false

# -----------------------------
# WEBHOOKS (For Production)
# -----------------------------

# Webhook URL for Telegram updates
# Leave empty for polling mode (development)
# Format: https://your-domain.com/webhook
WEBHOOK_URL=

# Webhook port (if using webhooks)
WEBHOOK_PORT=8080

# Webhook domain (for SSL certificate)
WEBHOOK_DOMAIN=

# -----------------------------
# ADVANCED SETTINGS
# -----------------------------

# Transaction confirmation timeout (ms)
TX_CONFIRMATION_TIMEOUT=60000

# Maximum retries for failed transactions
MAX_TX_RETRIES=3

# Cache TTL in seconds
CACHE_TTL=300

# Session timeout in seconds
SESSION_TIMEOUT=3600

# Enable analytics
ENABLE_ANALYTICS=false

# Analytics endpoint
ANALYTICS_ENDPOINT=

# -----------------------------
# FEATURE FLAGS
# -----------------------------

# Enable wallet connection feature
FEATURE_WALLET_CONNECT=true

# Enable contract deployment
FEATURE_CONTRACT_DEPLOY=true

# Enable transaction sending
FEATURE_SEND_TX=true

# Enable inline mode
FEATURE_INLINE_MODE=false

# Enable group chat support
FEATURE_GROUP_SUPPORT=false

# Enable payment processing
FEATURE_PAYMENTS=false

# -----------------------------
# LOCALIZATION
# -----------------------------

# Default language
# Options: en, ru, es, zh, etc.
DEFAULT_LANGUAGE=en

# Supported languages (comma-separated)
SUPPORTED_LANGUAGES=en,ru

# -----------------------------
# EXTERNAL SERVICES (Optional)
# -----------------------------

# OpenAI API key (for AI features)
OPENAI_API_KEY=

# IPFS gateway URL
IPFS_GATEWAY_URL=https://ipfs.io/ipfs/

# External API endpoint
EXTERNAL_API_URL=

# External API key
EXTERNAL_API_KEY=